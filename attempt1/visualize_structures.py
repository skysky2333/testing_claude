#!/usr/bin/env python3
"""
PyMOL automation script for creating structure superpositions
Author: Claude Code Assistant
"""

import os
import sys
import argparse
from pathlib import Path

def create_pymol_superposition_script(wt_pdb, mut_pdbs, output_dir, script_file):
    """
    Create a PyMOL script for generating superposition images
    """
    script_content = f'''# PyMOL script for structure superposition
# Auto-generated by visualize_structures.py

# Set up PyMOL environment
set ray_opaque_background, off
set ray_shadows, on
set antialias, 2
set orthoscopic, on

# Load wild-type structure
load {wt_pdb}, wildtype
show cartoon, wildtype
color cyan, wildtype
set cartoon_transparency, 0.3, wildtype

'''

    for i, mut_pdb in enumerate(mut_pdbs):
        mut_name = f"mutant_{i+1}"
        mut_file = Path(mut_pdb).name.replace('.pdb', '')
        
        script_content += f'''
# Load mutant structure {i+1}
load {mut_pdb}, {mut_name}
show cartoon, {mut_name}
color orange, {mut_name}

# Align to wild-type
align {mut_name}, wildtype

# Create superposition view
bg_color white
zoom
orient

# Save image
png {output_dir}/{mut_file}_superposition.png, width=1200, height=900, dpi=300, ray=1

# Remove mutant for next iteration
delete {mut_name}

'''

    script_content += '''
# Clean up and quit
delete all
quit
'''

    with open(script_file, 'w') as f:
        f.write(script_content)

def create_python_pymol_script(wt_pdb, mut_pdbs, output_dir):
    """
    Create a Python script that uses PyMOL API
    """
    python_script = f'''#!/usr/bin/env python3

import pymol
from pymol import cmd
import os
import sys

def create_superpositions():
    """Create superposition images using PyMOL API"""
    
    # Initialize PyMOL
    pymol.pymol_argv = ['pymol', '-qc']  # Quiet and no GUI
    pymol.finish_launching()
    
    # Set up environment
    cmd.set('ray_opaque_background', 'off')
    cmd.set('ray_shadows', 'on')
    cmd.set('antialias', 2)
    cmd.set('orthoscopic', 'on')
    
    # Load wild-type structure
    cmd.load('{wt_pdb}', 'wildtype')
    cmd.show('cartoon', 'wildtype')
    cmd.color('cyan', 'wildtype')
    cmd.set('cartoon_transparency', 0.3, 'wildtype')
    
    mutant_files = {mut_pdbs}
    
    for i, mut_pdb in enumerate(mutant_files):
        if not os.path.exists(mut_pdb):
            print(f"Warning: Mutant PDB file not found: {{mut_pdb}}")
            continue
            
        mut_name = f"mutant_{{i+1}}"
        mut_file = os.path.basename(mut_pdb).replace('.pdb', '')
        
        print(f"Processing {{mut_file}}...")
        
        # Load mutant structure
        cmd.load(mut_pdb, mut_name)
        cmd.show('cartoon', mut_name)
        cmd.color('orange', mut_name)
        
        # Align to wild-type
        alignment_result = cmd.align(mut_name, 'wildtype')
        rmsd = alignment_result[0] if alignment_result else 0.0
        
        # Set up view
        cmd.bg_color('white')
        cmd.zoom()
        cmd.orient()
        
        # Save image
        output_file = os.path.join('{output_dir}', f'{{mut_file}}_superposition.png')
        cmd.png(output_file, width=1200, height=900, dpi=300, ray=1)
        
        print(f"Created: {{output_file}} (RMSD: {{rmsd:.3f}} Ã…)")
        
        # Remove mutant for next iteration
        cmd.delete(mut_name)
    
    # Clean up
    cmd.quit()
    print("Superposition images created successfully!")

if __name__ == "__main__":
    create_superpositions()
'''
    
    return python_script

def find_mutant_pdbs(ddg_dir):
    """
    Find all mutant PDB files in the DDG directory
    """
    ddg_path = Path(ddg_dir)
    if not ddg_path.exists():
        return []
    
    # Look for PDB files with mutant naming pattern
    mut_pdbs = []
    for pattern in ['mut_*_ddg_mut_*.pdb', 'mut_*.pdb', '*_mut_*.pdb']:
        mut_pdbs.extend(ddg_path.glob(pattern))
    
    return [str(p) for p in sorted(mut_pdbs)]

def main():
    parser = argparse.ArgumentParser(
        description="Create PyMOL visualization scripts for protein structure superposition",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  python visualize_structures.py wildtype.pdb ddg_output/ images/
  python visualize_structures.py --script-only wildtype.pdb ddg_output/ images/
  python visualize_structures.py --format pymol wildtype.pdb ddg_output/ images/
        """
    )
    
    parser.add_argument('wildtype_pdb',
                       help='Wild-type PDB file')
    parser.add_argument('ddg_dir', 
                       help='Directory containing mutant PDB files')
    parser.add_argument('output_dir',
                       help='Output directory for images')
    parser.add_argument('--format', choices=['python', 'pymol'],
                       default='python',
                       help='Output format: python script or PyMOL script')
    parser.add_argument('--script-only', action='store_true',
                       help='Only create script, do not run')
    parser.add_argument('--list-mutants', action='store_true',
                       help='List found mutant PDB files and exit')
    
    args = parser.parse_args()
    
    # Validate inputs
    if not os.path.exists(args.wildtype_pdb):
        print(f"Error: Wild-type PDB file not found: {args.wildtype_pdb}", file=sys.stderr)
        sys.exit(1)
    
    if not os.path.exists(args.ddg_dir):
        print(f"Error: DDG directory not found: {args.ddg_dir}", file=sys.stderr)
        sys.exit(1)
    
    # Find mutant PDB files
    mut_pdbs = find_mutant_pdbs(args.ddg_dir)
    
    if args.list_mutants:
        print("Found mutant PDB files:")
        for pdb in mut_pdbs:
            print(f"  {pdb}")
        print(f"Total: {len(mut_pdbs)} files")
        sys.exit(0)
    
    if not mut_pdbs:
        print("Warning: No mutant PDB files found in DDG directory", file=sys.stderr)
        print("Looking for files matching patterns: mut_*_ddg_mut_*.pdb, mut_*.pdb, *_mut_*.pdb", file=sys.stderr)
        sys.exit(1)
    
    # Create output directory
    os.makedirs(args.output_dir, exist_ok=True)
    
    print(f"Found {len(mut_pdbs)} mutant PDB files")
    print(f"Wild-type structure: {args.wildtype_pdb}")
    print(f"Output directory: {args.output_dir}")
    
    if args.format == 'pymol':
        # Create PyMOL script
        script_file = os.path.join(args.output_dir, 'create_superpositions.pml')
        create_pymol_superposition_script(args.wildtype_pdb, mut_pdbs, args.output_dir, script_file)
        print(f"PyMOL script created: {script_file}")
        
        if not args.script_only:
            print("To run the script, use: pymol -c create_superpositions.pml")
            
    else:  # python format
        # Create Python script
        script_file = os.path.join(args.output_dir, 'create_superpositions.py')
        python_script = create_python_pymol_script(args.wildtype_pdb, mut_pdbs, args.output_dir)
        
        with open(script_file, 'w') as f:
            f.write(python_script)
        os.chmod(script_file, 0o755)
        
        print(f"Python script created: {script_file}")
        
        if not args.script_only:
            # Try to run the script
            try:
                import pymol
                print("PyMOL module found. Running visualization...")
                exec(open(script_file).read())
            except ImportError:
                print("PyMOL not available as Python module.")
                print(f"To run manually: python {script_file}")
            except Exception as e:
                print(f"Error running visualization: {e}")
                print(f"To run manually: python {script_file}")

if __name__ == "__main__":
    main()